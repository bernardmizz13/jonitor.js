// b // registerNewAccount // return JsRV.registration.wrongLengths // console.error("\n\nError: registration should not have been called since there were invalid lengths\n\n\n"); JsRV.registration.wrongLengths = false //
// b // registerNewAccount // return JsRV.registration.userNameExists // console.error("\n\nError: registration should not have been called since username already exists\n\n\n"); JsRV.registration.userNameExists = false //
// b // registerNewAccount // return !JsRV.registration.equalPasswords // console.error("\n\nError: registration should not have been called since passwords are not identical\n\n\n"); JsRV.registration.equalPasswords = true //
// b // registerNewAccount // return !JsRV.registration.securityQuestionChosen // console.error("\n\nError: registration should not have been called since security question was not chosen\n\n\n"); JsRV.registration.securityQuestionChosen = true //
// b // checkPasswordConfirmation // return document.getElementById("password-textbox").value != document.getElementById("confirm-password-textbox").value //JsRV.registration.equalPasswords = false //
// b // checkPasswordConfirmation // return document.getElementById("password-textbox").value === document.getElementById("confirm-password-textbox").value //JsRV.registration.equalPasswords = true //
// b // inputtingErrorFound // return JsRV.currentArgs[1].includes('should be longer than') && !JsRV.registration.wrongLengths // console.error("\n\nError: all details had valid lengths, registration should have triggered\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'username-textbox' && !JsRV.registration.userNameExists && JsRV.currentArgs[1].includes('already being used') // console.error("\n\nError: username does not exist in the system, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[1].includes('Passwords') && JsRV.registration.equalPasswords // console.error("\n\n""\nError: passwords are identical, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'name-textbox' && JsRV.currentArgs[1] === '3 < Name < 8' && !JsRV.modifyUser.invalidName // console.error("\n\nError: name was valid, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'security-textbox' && JsRV.currentArgs[1] === 'Choose one of the questions' && JsRV.modifyUser.securityQuestionChosen // console.error("\n\nError: security question was chosen, error shouldn't have been triggered\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'security-textbox' && JsRV.currentArgs[1].length != 0 && !JsRV.modifyUser.invalidSecurityAnswer // console.error("\n\nError: security answer has a valid length, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'old-password-textbox' && JsRV.currentArgs[1] === 'Input current password' && !JsRV.modifyUser.invalidOldPasswordLength // console.error("\n\nError: old password length is acceptable, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'password-textbox' && JsRV.currentArgs[1] === '1 < Password < 20' && !JsRV.modifyUser.invalidPasswordLength // console.error("\n\nError: new password length is acceptable, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'confirm-password-textbox' && JsRV.currentArgs[1] === '1 < Password < 20' && !JsRV.modifyUser.invalidConfirmationPasswordLength // console.error("\n\nError: confirmation password length is acceptable, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'old-password-textbox' && JsRV.currentArgs[1] === 'Incorrect password' && JsRV.modifyUser.correctPassword // console.error("\n\nError: password is correct, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'password-textbox' && JsRV.currentArgs[1] === 'Cannot be same as old password.' && !JsRV.modifyUser.samePassword // console.error("\n\nError: new password is not the same as the old password, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'password-textbox' && JsRV.currentArgs[1] === '6 < Password < 12' && !JsRV.modifyUser.newPasswordNotInLimits // console.error("\n\nError: new password is within limits, system should have accepted it\n\n\n") //
// b // inputtingErrorFound // return JsRV.currentArgs[0] === 'password-textbox' && JsRV.currentArgs[1] === 'Passwords did not match.' && JsRV.modifyUser.passwordsMatch // console.error("\n\nError: passwords match, system should have accepted it\n\n\n") //
// b // inputLoginErrorFound // return JsRV.currentArgs[0] === 'login-username-textbox' && JsRV.registration.userNameExistsLogIn // console.error("\n\nError: username exists, system should have accepted it\n\n\n") //
// b // inputLoginErrorFound // return JsRV.currentArgs[0] === 'login-username-textbox' && !JsRV.registration.userNameExistsLogIn // JsRV.registration.userNameExistsLogIn = false; JsRV.registration.userLogIn = ''; //
// b // inputLoginErrorFound // return JsRV.currentArgs[0] === 'login-password-textbox' && JsRV.registration.correctPassword // console.error("\n\nError: password is correct, system should have accepted it\n\n\n") //
// b // inputLoginErrorFound // return JsRV.currentArgs[0] === 'login-password-textbox' && !JsRV.registration.correctPassword // JsRV.registration.correctPassword = false; JsRV.registration.userLogIn = ''; //
// b // sortPlayers // return true // JsRV.getUsersJsRVLocalStorage(); JsRV.sortPlayersJsRV(); //
// b // checkUsernameAvailability // return JsRV.checkUsernameExists(document.getElementById("username-textbox").value) // JsRV.registration.userNameExists = true //
// b // checkUsernameAvailability // return !JsRV.checkUsernameExists(document.getElementById("username-textbox").value) // JsRV.registration.userNameExists = false //
// b // disableBottomForm // return !JsRV.currentArgs[0] && !document.getElementById("account-modification").checked // console.error("\n\nError: form shouldn't have been enabled since thick box in unchecked") //
// b // disableBottomForm // return JsRV.currentArgs[0] && document.getElementById("account-modification").checked // console.error("\n\nError: form should have been enabled since thick box in checked") //
// b // disableBottomForm // return JsRV.currentArgs[0] // JsRV.modifyUser.canModify = false //
// b // disableBottomForm // return !JsRV.currentArgs[0] // JsRV.modifyUser.canModify = true //
// b // validateRegistrationModification // return true // JsRV.modifyUser.inputtedName = document.getElementById("name-textbox").value; JsRV.modifyUser.newPassword = document.getElementById("password-textbox").value; JsRV.modifyUser.oldPassword = document.getElementById("old-password-textbox").value; JsRV.modifyUser.confirmPassword = document.getElementById("confirm-password-textbox").value; JsRV.modifyUser.securityAnswer = document.getElementById("security-textbox").value; JsRV.modifyUser.securityQuestion = document.getElementById("security-list").value; //
// b // checkAmendedName // return true // JsRV.checkAmendedName(); //
// b // deleteUserData // return true // JsRV.modifyUser.deactivateAccount = true; JsRV.deleteUser(); //
// a // checkElementLength // return (JsRV.currentArgs[0].length < JsRV.currentArgs[1] || JsRV.currentArgs[0].length > JsRV.currentArgs[2]) && JsRV.returnValue // JsRV.registration.wrongLengths = true; console.error("\n\nError: length is smaller than minimum or larger than maximum\n\n\n"); //
// a // checkElementLength // return (JsRV.currentArgs[0].length < JsRV.currentArgs[1] || JsRV.currentArgs[0].length > JsRV.currentArgs[2]) // JsRV.registration.wrongLengths = true; //
// a // checkElementLength // return (JsRV.currentArgs[0].length > JsRV.currentArgs[1]-1 && JsRV.currentArgs[0].length < JsRV.currentArgs[2]+1 && JsRV.registration.wrongLengths) // if(!JsRV.registration.wrongLengths){JsRV.registration.wrongLengths = false;} //
// a // checkChosenQuestion // return document.getElementById("security-list").value.length === 0 // JsRV.registration.securityQuestionChosen = false; //
// a // checkChosenQuestion // return document.getElementById("security-list").value.length != 0 // JsRV.registration.securityQuestionChosen = true; //
// a // getLocalStorage // return !JsRV.compareUserDetails() // console.error("\n\nError: user credentials do not match from getLocalStorage\n\n\n"); //
// a // getSampleRanksLocalStorage // return !JsRV.compareUserDetails() // console.error("\n\nError: user credentials do not match from getSampleRanksLocalStorage\n\n\n"); //
// b // getLocalStorage // return true // JsRV.getUsersJsRVLocalStorage(); //
// b // getSampleRanksLocalStorage // return true // JsRV.getUsersJsRVLocalStorage(); //
// b // checkUsername // return JsRV.checkUsernameExists(document.getElementById("login-username-textbox").value) // JsRV.registration.userNameExistsLogIn = true; JsRV.registration.userLogIn = document.getElementById("login-username-textbox").value; //
// b // checkUsername // return !JsRV.checkUsernameExists(document.getElementById("login-username-textbox").value) // JsRV.registration.userNameExistsLogIn = false; JsRV.registration.userLogIn = ''; //
// b // checkPassword // return JsRV.checkPassword(document.getElementById("login-password-textbox").value) // JsRV.registration.correctPassword = true; //
// b // checkPassword // return !JsRV.checkPassword(document.getElementById("login-password-textbox").value) // JsRV.registration.correctPassword = false; JsRV.registration.userLogIn = ''; //
// b // setSampleRanksLocalStorage // return true // JsRV.saveUsersJsRVLocalStorage(); //
// a // setSampleRanksLocalStorage // return !JsRV.compareUserDetails() // console.error("\n\nError: user credentials do not match from setSampleRanksLocalStorage\n\n\n"); //
// b // setRankingsLocalStorage // return true // JsRV.saveUsersJsRVLocalStorage(); //
// a // setRankingsLocalStorage // return !JsRV.compareUserDetails() // console.error("\n\nError: user credentials do not match from setRankingsLocalStorage\n\n\n"); //
// b // getRankingsLocalStorage // return true // JsRV.getUsersJsRVLocalStorage(); //
// a // getRankingsLocalStorage // return !JsRV.compareUserDetails() // console.error("\n\nError: user credentials do not match from getRankingsLocalStorage\n\n\n"); //
// a // getLoggedInUser // var usernames = JSON.parse(localStorage.usernames); return usernames[JsRV.returnValue] != JsRV.getLoggedInUserJsRV(); // console.error("\n\nError: wrong logged in user retrieved\n\n\n"); //
// a // getLogOutLocalStorage // return !JsRV.compareUserDetails(); // console.error("\n\nError: user credentials do not match\n\n\n"); //
// a // getCurrentViewMode // return !JsRV.checkViewMode(); // console.error("\n\nError: view mode is incorrect\n\n"); //
// a // getCurrentColor // return !JsRV.checkColour(); // console.error("\n\nError: Colour is incorrect\n\n"); //
// b // setCurrentViewMode // return true // JsRV.setView(document.getElementById("play-mode-list").value); JsRV.saveUsersJsRVLocalStorage(); //
// a // setView // var view = JsRV.retrieveView(); var bodyView = document.getElementsByClassName("page-body")[0].style.backgroundImage; return bodyView.includes('night-mode') && view != 'night-mode' // console.error("\n\nError: view was not changed as instructed by user\n\n\n"); //
// a // setView // var view = JsRV.retrieveView(); var bodyView = document.getElementsByClassName("page-body")[0].style.backgroundImage; return bodyView.includes('morning-mode') && view != 'morning-mode' // console.error("\n\nError: view was not changed as instructed by user\n\n\n"); //
// a // setView // var view = JsRV.retrieveView(); var bodyView = document.getElementsByClassName("page-body")[0].style.backgroundImage; return bodyView.includes('plain-mode') && view != 'plain-mode' // console.error("\n\nError: view was not changed as instructed by user\n\n\n"); //
// b // setCurrentColor // return true // JsRV.setColour(document.getElementById("color-list").value); JsRV.saveUsersJsRVLocalStorage(); //
// b // setCurrentVolume // return true // JsRV.retrieveVolume(); JsRV.saveUsersJsRVLocalStorage(); //
// a // getOptionsLocalStorage // return !JsRV.compareUserDetails() // console.error("\n\nError: user details did not match from getOptionsLocalStorage\n\n\n"); //
// b // checkAmendedSecurity // return true // JsRV.checkAmendedSecurity(); //
// b // checkAmendedPassword // return true // JsRV.checkAmendedPassword(); //
// b // setOptionsLocalStorage // return true // JsRV.setUserOptionsLocalStorage(); //
// a // storeLocalStorage // return true // JsRV.storeUsersLocalStorage(); //
// b // saveItem // return (JsRV.currentArgs[0] === 'loggedIn' && JsRV.currentArgs[1].includes('true') && !location.href.includes("game")) && !JsRV.registration.correctPassword // console.error("\n\nError: password was incorrect\n\n\n"); //
// b // saveItem // return (JsRV.currentArgs[0] === 'loggedIn' && JsRV.currentArgs[1].includes('true') && !location.href.includes("game")) && !JsRV.registration.userNameExistsLogIn // console.error("\n\nError: username was incorrect\n\n\n"); //
// a // saveItem // return (JsRV.currentArgs[0] === 'loggedIn' && JsRV.currentArgs[1].includes('true') && !location.href.includes("game") && JsRV.registration.userLogIn.length != 0) // JsRV.setLoggedIn(JsRV.registration.userLogIn); //
// a // saveItem // return (JsRV.currentArgs[0] === 'loggedIn' && JsRV.currentArgs[1].includes('true') && !location.href.includes("game")) && JsRV.registration.userLogIn.length === 0 // console.error("\n\nError: invalid username or password were inputted, cannot set user to be logged in\n\n\n"); //
// b // validateForgot // return true // JsRV.forgot.username = document.getElementById("username-textbox").value; JsRV.forgot.securityQuestion = document.getElementById("security-list").value; JsRV.forgot.securityAnswer = document.getElementById("security-textbox").value; //
// a // checkChosenQuestion // return JsRV.forgot.securityQuestion.length != 0 && document.getElementById("status-message").innerHTML === 'Choose a Security Question.' // JsRV.forgot.chosenSecurityQuestion = true; console.error("\n\nError: security question was chosen, error should not have been triggered"); //
// a // checkChosenQuestion // return JsRV.forgot.securityQuestion.length === 0 && document.getElementById("status-message").innerHTML != 'Choose a Security Question.' // JsRV.forgot.chosenSecurityQuestion = false; console.error("\n\nError: security question was not chosen, error should have appeared"); //
// a // checkChosenQuestion // return JsRV.forgot.securityQuestion.length === 0 // JsRV.forgot.chosenSecurityQuestion = false; //
// a // checkChosenQuestion // return JsRV.forgot.securityQuestion.length != 0 // JsRV.forgot.chosenSecurityQuestion = true; //
// b // checkForgotUsername // return JsRV.checkUsernameExists(JsRV.forgot.username) // JsRV.forgot.usernameExists = true; //
// b // checkForgotUsername // return !JsRV.checkUsernameExists(JsRV.forgot.username) // JsRV.forgot.usernameExists = false; //
// b // inputForgotErrorFound // return JsRV.forgot.usernameExists && JsRV.currentArgs[1] === 'Username does not exist.' // console.error("\n\nError: user does exist\n\n\n"); //
// b // inputForgotErrorFound // return !JsRV.forgot.invalidSecurityAnswer && JsRV.currentArgs[1] === 'Incorrect security answer.' // console.error("\n\nError: security answer is valid\n\n\n"); //
// a // checkForgotSecurityQuestion // return (JsRV.retrieveSecurityQuestion(JsRV.forgot.username) === JsRV.forgot.securityQuestion) && !processRenewal // console.error("\n\nError: security question was valid\n\n\n"); //
// a // checkForgotSecurityQuestion // return (JsRV.retrieveSecurityQuestion(JsRV.forgot.username) != JsRV.forgot.securityQuestion) && processRenewal // console.error("\n\nError: security question was not valid, processRenewal should be set to false\n\n\n"); //
// b // checkForgotSecurityQuestion // return (JsRV.retrieveSecurityQuestion(JsRV.forgot.username) != JsRV.forgot.securityQuestion) // JsRV.forgot.invalidSecurityQuestion = true; //
// b // checkForgotSecurityQuestion // return (JsRV.retrieveSecurityQuestion(JsRV.forgot.username) === JsRV.forgot.securityQuestion) // JsRV.forgot.invalidSecurityQuestion = false; //
// a // checkForgotSecurityAnswer // return (JsRV.retrieveSecurityAnswer(JsRV.forgot.username) === JsRV.forgot.securityAnswer) && !processRenewal // console.error("\n\nError: security answer was valid, processRenewal should be true\n\n\n"); //
// a // checkForgotSecurityAnswer // return (JsRV.retrieveSecurityAnswer(JsRV.forgot.username) != JsRV.forgot.securityAnswer) && processRenewal // console.error("\n\nError: security answer was not valid, processRenewal should be set to false\n\n\n"); //
// b // checkForgotSecurityAnswer // return (JsRV.retrieveSecurityAnswer(JsRV.forgot.username) != JsRV.forgot.securityAnswer) // JsRV.forgot.invalidSecurityAnswer = true; //
// b // checkForgotSecurityAnswer // return (JsRV.retrieveSecurityAnswer(JsRV.forgot.username) === JsRV.forgot.securityAnswer) // JsRV.forgot.invalidSecurityAnswer = false; //
// b // changePassword // return (!JsRV.forgot.usernameExists && JsRV.forgot.invalidSecurityQuestion && JsRV.forgot.invalidSecurityAnswer) // console.error("\n\nNew modification should not have triggered because of invalid details\n\n"); //
// b // changePassword // return true // JsRV.changePassword(JsRV.forgot.username); //
// b // startMovementReading // return true // JsRV.game.pointsLevel = pointsSet; JsRV.game.carSpeed = originalSquareSpeed; JsRV.game.originalCarSpeed = originalSquareSpeed; JsRV.game.disabledMovement = false; //
// b // checkPossibleMove // return JsRV.game.disabledMovement // console.error("\n\nError: checkPossibleMove should not have been called since movement is disabled\n\n"); //
// b // setPanel // return true; // JsRV.game.gamePoints =  time * JsRV.game.pointsLevel[level - 1]; //
// b // runSquare // return keyActivated === 'left' && Keys.left // JsRV.game.carDirection = 'l'; JsRV.game.xAxis = JsRV.game.carXPosition - JsRV.game.carSpeed; //
// b // runSquare // return keyActivated === 'left' && !Keys.left // console.error("\n\nError: Direction was not set to left in Keys\n\n") //
// b // runSquare // return keyActivated != 'left' && Keys.left // console.error("\n\nError: Direction was not set to left in keyActivated\n\n") //
// b // runSquare // return keyActivated === 'right' && Keys.right // JsRV.game.carDirection = 'r'; JsRV.game.xAxis = JsRV.game.carXPosition + JsRV.game.carSpeed; //
// b // runSquare // return keyActivated === 'right' && !Keys.right // console.error("\n\nError: Direction was not set to right in Keys\n\n") //
// b // runSquare // return keyActivated != 'right' && Keys.right // console.error("\n\nError: Direction was not set to right in keyActivated\n\n") //
// b // runSquare // return keyActivated === 'top' && Keys.up // JsRV.game.carDirection = 'u'; JsRV.game.yAxis = JsRV.game.carYPosition - JsRV.game.carSpeed; //
// b // runSquare // return keyActivated === 'top' && !Keys.up // console.error("\n\nError: Direction was not set to up in Keys\n\n") //
// b // runSquare // return keyActivated != 'top' && Keys.up // console.error("\n\nError: Direction was not set to up in keyActivated\n\n") //
// b // runSquare // return keyActivated === 'bottom' && Keys.down // JsRV.game.carDirection = 'd';  JsRV.game.yAxis = JsRV.game.carYPosition + JsRV.game.carSpeed; //
// b // runSquare // return keyActivated === 'bottom' && !Keys.down // console.error("\n\nError: Direction was not set to bottom in Keys\n\n") //
// b // runSquare // return keyActivated != 'bottom' && Keys.down // console.error("\n\nError: Direction was not set to bottom in keyActivated\n\n") //
// a // runSquare // return true // JsRV.game.carSpeed = originalSquareSpeed; //
// b // checkXaxis // return JsRV.game.xAxis < 0 // JsRV.game.carXPosition = 0; JsRV.game.allowedMovement = false; //
// b // checkXaxis // return JsRV.game.xAxis > 1030 // JsRV.game.carXPosition = 1030; JsRV.game.allowedMovement = false; //
// b // checkXaxis // return JsRV.game.xAxis <= 1030 && JsRV.game.xAxis >= 0 // JsRV.game.allowedMovement = true; //
// a // checkXaxis // return movementAllowed && !JsRV.game.allowedMovement // console.error("\n\nMovement should have been set to false\n\n"); //
// a // checkXaxis // return !movementAllowed && JsRV.game.allowedMovement // console.error("\n\nMovement should have been set to true\n\n"); //
// a // checkXaxis // return squarePositionX != JsRV.game.carXPosition // console.error("\n\nError: car x axis do not match\n\n"); //
// b // checkYaxis // return JsRV.game.yAxis < 0 //  JsRV.game.carYPosition = 0; JsRV.game.allowedMovement = false; //
// b // checkYaxis // return JsRV.game.yAxis > 380 // JsRV.game.carYPosition = 380; JsRV.game.allowedMovement = false; //
// b // checkYaxis // return JsRV.game.yAxis <= 380 && JsRV.game.yAxis >= 0 // JsRV.game.allowedMovement = true; //
// a // checkYaxis // return movementAllowed && !JsRV.game.allowedMovement // console.error("\n\nMovement should have been set to false\n\n"); //
// a // checkYaxis // return !movementAllowed && JsRV.game.allowedMovement // console.error("\n\nMovement should have been set to true\n\n"); //
// a // checkYaxis // return squarePositionY != JsRV.game.carYPosition // console.error("\n\nError: car y axis do not match\n\n"); //
// b // checkCollision // return !JsRV.onTrack() // JsRV.game.onTrack = false; JsRV.game.carSpeed = JsRV.game.carSpeed/2; JsRV.game.onOil = false; JsRV.game.onFinish = false; JsRV.game.onWall = false; //
// b // checkCollision // return JsRV.onOil() // JsRV.game.onTrack = true; JsRV.game.carSpeed = JsRV.game.carSpeed/4; JsRV.game.onOil = true; JsRV.game.onFinish = false; JsRV.game.onWall = false; //
// b // checkCollision // return JsRV.onFinish() // JsRV.game.onTrack = true; JsRV.game.onOil = false; JsRV.game.onFinish = true; JsRV.game.onWall = false; //
// b // checkCollision // return JsRV.onWall() // JsRV.game.onTrack = true; JsRV.game.onOil = false; JsRV.game.onFinish = false; JsRV.game.onWall = true; //
// b // checkCollision // return JsRV.onTrack() // JsRV.game.onTrack = true; JsRV.game.onOil = false; JsRV.game.onFinish = false; JsRV.game.onWall = false; //
// a // checkCollision // return !JsRV.game.onTrack && JsRV.game.carSpeed != squareSpeed// console.error("\n\nError: speed should have been reduced by half\n\n") JsRV.updateCarPosition(); //
// a // checkCollision // return JsRV.game.onOil && JsRV.game.carSpeed != squareSpeed // console.error("\n\nError: speed should have been divided by 4\n\n") JsRV.updateCarPosition(); //
// a // checkCollision // return true // JsRV.updateCarPosition(); //
// b // runGameOver // return time != 0 && gameOverType === 'time' // console.error("\n\nError: game should not have ended with time up because the time is not over yet\n\n") //
// b // runGameOver // return (!JsRV.game.onFinish || JsRV.game.nextMoveX < 1040) && gameOverType === 'win' // console.error("\n\nError: game should not have ended with a finish because car has not arrived yet\n\n") //
// b // runGameOver // return !JsRV.game.onWall && gameOverType === 'crash' // console.error("\n\nError: game should not have ended after a crash because the car did not crash\n\n") //
// b // runGameOver // return gameOverType === 'time' // JsRV.game.lostCrash = false; JsRV.game.won = false; JsRV.game.lostTimeUp = true; //
// b // runGameOver // return gameOverType === 'win' // JsRV.game.lostCrash = false; JsRV.game.won = true; JsRV.game.lostTimeUp = false; //
// b // runGameOver // return gameOverType === 'crash' // JsRV.game.lostCrash = true; JsRV.game.won = false; JsRV.game.lostTimeUp = false; //
// b // storeGameLocalStorage // return JsRV.game.lostCrash // JsRV.addLossCrash(); //
// b // storeGameLocalStorage // return JsRV.game.lostTimeUp // JsRV.addLossTimeUp(); //
// b // storeGameLocalStorage // return JsRV.game.win // JsRV.addWin(); //
// a // storeGameLocalStorage // return !JsRV.compareUserDetails(); // console.error("\n\nError: user credentials do not match from storeGameLocalStorage\n\n"); //